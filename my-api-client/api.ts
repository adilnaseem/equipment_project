/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * * `hr` - Human Resources * `finance` - Finance * `engineering` - Engineering * `marketing` - Marketing * `sales` - Sales
 * @export
 * @enum {string}
 */

export const DepartmentEnum = {
    Hr: 'hr',
    Finance: 'finance',
    Engineering: 'engineering',
    Marketing: 'marketing',
    Sales: 'sales'
} as const;

export type DepartmentEnum = typeof DepartmentEnum[keyof typeof DepartmentEnum];


/**
 * 
 * @export
 * @interface Employee
 */
export interface Employee {
    /**
     * 
     * @type {number}
     * @memberof Employee
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof Employee
     */
    'user': number;
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    'name': string;
    /**
     * 
     * @type {DepartmentEnum}
     * @memberof Employee
     */
    'department': DepartmentEnum;
    /**
     * 
     * @type {number}
     * @memberof Employee
     */
    'salary': number;
}


/**
 * 
 * @export
 * @interface Equipment
 */
export interface Equipment {
    /**
     * 
     * @type {number}
     * @memberof Equipment
     */
    'id': number;
    /**
     * 
     * @type {ManufacturerEnum}
     * @memberof Equipment
     */
    'manufacturer': ManufacturerEnum;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'made_in': string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'serial_no': string;
    /**
     * 
     * @type {TypeEnum}
     * @memberof Equipment
     */
    'type': TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'model': string;
    /**
     * 
     * @type {StatusEnum}
     * @memberof Equipment
     */
    'status': StatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'received_from': string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'date_of_installation': string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof Equipment
     */
    'place_of_installation': number;
}


/**
 * * `SD` - Smith Detection * `RP` - Rapiscan * `L3` - L3 Comm * `AS` - Astrophysics
 * @export
 * @enum {string}
 */

export const ManufacturerEnum = {
    Sd: 'SD',
    Rp: 'RP',
    L3: 'L3',
    As: 'AS'
} as const;

export type ManufacturerEnum = typeof ManufacturerEnum[keyof typeof ManufacturerEnum];


/**
 * 
 * @export
 * @interface PaginatedEmployeeList
 */
export interface PaginatedEmployeeList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedEmployeeList
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedEmployeeList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedEmployeeList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Employee>}
     * @memberof PaginatedEmployeeList
     */
    'results': Array<Employee>;
}
/**
 * 
 * @export
 * @interface PaginatedEquipmentList
 */
export interface PaginatedEquipmentList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedEquipmentList
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedEquipmentList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedEquipmentList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Equipment>}
     * @memberof PaginatedEquipmentList
     */
    'results': Array<Equipment>;
}
/**
 * 
 * @export
 * @interface PatchedEmployee
 */
export interface PatchedEmployee {
    /**
     * 
     * @type {number}
     * @memberof PatchedEmployee
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedEmployee
     */
    'user'?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedEmployee
     */
    'name'?: string;
    /**
     * 
     * @type {DepartmentEnum}
     * @memberof PatchedEmployee
     */
    'department'?: DepartmentEnum;
    /**
     * 
     * @type {number}
     * @memberof PatchedEmployee
     */
    'salary'?: number;
}


/**
 * 
 * @export
 * @interface PatchedEquipment
 */
export interface PatchedEquipment {
    /**
     * 
     * @type {number}
     * @memberof PatchedEquipment
     */
    'id'?: number;
    /**
     * 
     * @type {ManufacturerEnum}
     * @memberof PatchedEquipment
     */
    'manufacturer'?: ManufacturerEnum;
    /**
     * 
     * @type {string}
     * @memberof PatchedEquipment
     */
    'made_in'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedEquipment
     */
    'serial_no'?: string;
    /**
     * 
     * @type {TypeEnum}
     * @memberof PatchedEquipment
     */
    'type'?: TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PatchedEquipment
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedEquipment
     */
    'model'?: string;
    /**
     * 
     * @type {StatusEnum}
     * @memberof PatchedEquipment
     */
    'status'?: StatusEnum;
    /**
     * 
     * @type {string}
     * @memberof PatchedEquipment
     */
    'received_from'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedEquipment
     */
    'date_of_installation'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedEquipment
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedEquipment
     */
    'place_of_installation'?: number;
}


/**
 * * `I` - Installed * `R` - Reserve * `F` - Faulty
 * @export
 * @enum {string}
 */

export const StatusEnum = {
    I: 'I',
    R: 'R',
    F: 'F'
} as const;

export type StatusEnum = typeof StatusEnum[keyof typeof StatusEnum];


/**
 * * `XR` - Hand Baggage X-Ray Machine * `XR2` - Hold Baggage X-Ray Machine * `KH` - Khoji * `WT` - Walk Through Metal Detector Gate
 * @export
 * @enum {string}
 */

export const TypeEnum = {
    Xr: 'XR',
    Xr2: 'XR2',
    Kh: 'KH',
    Wt: 'WT'
} as const;

export type TypeEnum = typeof TypeEnum[keyof typeof TypeEnum];



/**
 * ApiApi - axios parameter creator
 * @export
 */
export const ApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Employee} employee 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesCreate: async (employee: Employee, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employee' is not null or undefined
            assertParamExists('apiEmployeesCreate', 'employee', employee)
            const localVarPath = `/api/employees/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(employee, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesDestroy: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiEmployeesDestroy', 'id', id)
            const localVarPath = `/api/employees/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesList: async (page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/employees/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {PatchedEmployee} [patchedEmployee] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesPartialUpdate: async (id: string, patchedEmployee?: PatchedEmployee, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiEmployeesPartialUpdate', 'id', id)
            const localVarPath = `/api/employees/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedEmployee, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiEmployeesRetrieve', 'id', id)
            const localVarPath = `/api/employees/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {Employee} employee 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesUpdate: async (id: string, employee: Employee, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiEmployeesUpdate', 'id', id)
            // verify required parameter 'employee' is not null or undefined
            assertParamExists('apiEmployeesUpdate', 'employee', employee)
            const localVarPath = `/api/employees/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(employee, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Equipment} equipment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEquipmentCreate: async (equipment: Equipment, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'equipment' is not null or undefined
            assertParamExists('apiEquipmentCreate', 'equipment', equipment)
            const localVarPath = `/api/equipment/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(equipment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this equipment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEquipmentDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiEquipmentDestroy', 'id', id)
            const localVarPath = `/api/equipment/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEquipmentList: async (page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/equipment/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this equipment.
         * @param {PatchedEquipment} [patchedEquipment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEquipmentPartialUpdate: async (id: number, patchedEquipment?: PatchedEquipment, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiEquipmentPartialUpdate', 'id', id)
            const localVarPath = `/api/equipment/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedEquipment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this equipment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEquipmentRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiEquipmentRetrieve', 'id', id)
            const localVarPath = `/api/equipment/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this equipment.
         * @param {Equipment} equipment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEquipmentUpdate: async (id: number, equipment: Equipment, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiEquipmentUpdate', 'id', id)
            // verify required parameter 'equipment' is not null or undefined
            assertParamExists('apiEquipmentUpdate', 'equipment', equipment)
            const localVarPath = `/api/equipment/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(equipment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {ApiSchemaRetrieveFormatEnum} [format] 
         * @param {ApiSchemaRetrieveLangEnum} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSchemaRetrieve: async (format?: ApiSchemaRetrieveFormatEnum, lang?: ApiSchemaRetrieveLangEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/schema/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiApi - functional programming interface
 * @export
 */
export const ApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Employee} employee 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEmployeesCreate(employee: Employee, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employee>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEmployeesCreate(employee, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiApi.apiEmployeesCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEmployeesDestroy(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEmployeesDestroy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiApi.apiEmployeesDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEmployeesList(page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedEmployeeList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEmployeesList(page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiApi.apiEmployeesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {PatchedEmployee} [patchedEmployee] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEmployeesPartialUpdate(id: string, patchedEmployee?: PatchedEmployee, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employee>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEmployeesPartialUpdate(id, patchedEmployee, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiApi.apiEmployeesPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEmployeesRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employee>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEmployeesRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiApi.apiEmployeesRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {Employee} employee 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEmployeesUpdate(id: string, employee: Employee, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employee>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEmployeesUpdate(id, employee, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiApi.apiEmployeesUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Equipment} equipment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEquipmentCreate(equipment: Equipment, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Equipment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEquipmentCreate(equipment, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiApi.apiEquipmentCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this equipment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEquipmentDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEquipmentDestroy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiApi.apiEquipmentDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEquipmentList(page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedEquipmentList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEquipmentList(page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiApi.apiEquipmentList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this equipment.
         * @param {PatchedEquipment} [patchedEquipment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEquipmentPartialUpdate(id: number, patchedEquipment?: PatchedEquipment, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Equipment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEquipmentPartialUpdate(id, patchedEquipment, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiApi.apiEquipmentPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this equipment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEquipmentRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Equipment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEquipmentRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiApi.apiEquipmentRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this equipment.
         * @param {Equipment} equipment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEquipmentUpdate(id: number, equipment: Equipment, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Equipment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEquipmentUpdate(id, equipment, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiApi.apiEquipmentUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {ApiSchemaRetrieveFormatEnum} [format] 
         * @param {ApiSchemaRetrieveLangEnum} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSchemaRetrieve(format?: ApiSchemaRetrieveFormatEnum, lang?: ApiSchemaRetrieveLangEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSchemaRetrieve(format, lang, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiApi.apiSchemaRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ApiApi - factory interface
 * @export
 */
export const ApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiApiFp(configuration)
    return {
        /**
         * 
         * @param {Employee} employee 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesCreate(employee: Employee, options?: RawAxiosRequestConfig): AxiosPromise<Employee> {
            return localVarFp.apiEmployeesCreate(employee, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesDestroy(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiEmployeesDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesList(page?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedEmployeeList> {
            return localVarFp.apiEmployeesList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {PatchedEmployee} [patchedEmployee] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesPartialUpdate(id: string, patchedEmployee?: PatchedEmployee, options?: RawAxiosRequestConfig): AxiosPromise<Employee> {
            return localVarFp.apiEmployeesPartialUpdate(id, patchedEmployee, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesRetrieve(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Employee> {
            return localVarFp.apiEmployeesRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {Employee} employee 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesUpdate(id: string, employee: Employee, options?: RawAxiosRequestConfig): AxiosPromise<Employee> {
            return localVarFp.apiEmployeesUpdate(id, employee, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Equipment} equipment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEquipmentCreate(equipment: Equipment, options?: RawAxiosRequestConfig): AxiosPromise<Equipment> {
            return localVarFp.apiEquipmentCreate(equipment, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this equipment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEquipmentDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiEquipmentDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEquipmentList(page?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedEquipmentList> {
            return localVarFp.apiEquipmentList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this equipment.
         * @param {PatchedEquipment} [patchedEquipment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEquipmentPartialUpdate(id: number, patchedEquipment?: PatchedEquipment, options?: RawAxiosRequestConfig): AxiosPromise<Equipment> {
            return localVarFp.apiEquipmentPartialUpdate(id, patchedEquipment, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this equipment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEquipmentRetrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Equipment> {
            return localVarFp.apiEquipmentRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this equipment.
         * @param {Equipment} equipment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEquipmentUpdate(id: number, equipment: Equipment, options?: RawAxiosRequestConfig): AxiosPromise<Equipment> {
            return localVarFp.apiEquipmentUpdate(id, equipment, options).then((request) => request(axios, basePath));
        },
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {ApiSchemaRetrieveFormatEnum} [format] 
         * @param {ApiSchemaRetrieveLangEnum} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSchemaRetrieve(format?: ApiSchemaRetrieveFormatEnum, lang?: ApiSchemaRetrieveLangEnum, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.apiSchemaRetrieve(format, lang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApiApi - object-oriented interface
 * @export
 * @class ApiApi
 * @extends {BaseAPI}
 */
export class ApiApi extends BaseAPI {
    /**
     * 
     * @param {Employee} employee 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiEmployeesCreate(employee: Employee, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiEmployeesCreate(employee, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiEmployeesDestroy(id: string, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiEmployeesDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiEmployeesList(page?: number, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiEmployeesList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {PatchedEmployee} [patchedEmployee] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiEmployeesPartialUpdate(id: string, patchedEmployee?: PatchedEmployee, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiEmployeesPartialUpdate(id, patchedEmployee, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiEmployeesRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiEmployeesRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {Employee} employee 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiEmployeesUpdate(id: string, employee: Employee, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiEmployeesUpdate(id, employee, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Equipment} equipment 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiEquipmentCreate(equipment: Equipment, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiEquipmentCreate(equipment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this equipment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiEquipmentDestroy(id: number, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiEquipmentDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiEquipmentList(page?: number, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiEquipmentList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this equipment.
     * @param {PatchedEquipment} [patchedEquipment] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiEquipmentPartialUpdate(id: number, patchedEquipment?: PatchedEquipment, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiEquipmentPartialUpdate(id, patchedEquipment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this equipment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiEquipmentRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiEquipmentRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this equipment.
     * @param {Equipment} equipment 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiEquipmentUpdate(id: number, equipment: Equipment, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiEquipmentUpdate(id, equipment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     * @param {ApiSchemaRetrieveFormatEnum} [format] 
     * @param {ApiSchemaRetrieveLangEnum} [lang] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiSchemaRetrieve(format?: ApiSchemaRetrieveFormatEnum, lang?: ApiSchemaRetrieveLangEnum, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiSchemaRetrieve(format, lang, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ApiSchemaRetrieveFormatEnum = {
    Json: 'json',
    Yaml: 'yaml'
} as const;
export type ApiSchemaRetrieveFormatEnum = typeof ApiSchemaRetrieveFormatEnum[keyof typeof ApiSchemaRetrieveFormatEnum];
/**
 * @export
 */
export const ApiSchemaRetrieveLangEnum = {
    Af: 'af',
    Ar: 'ar',
    ArDz: 'ar-dz',
    Ast: 'ast',
    Az: 'az',
    Be: 'be',
    Bg: 'bg',
    Bn: 'bn',
    Br: 'br',
    Bs: 'bs',
    Ca: 'ca',
    Ckb: 'ckb',
    Cs: 'cs',
    Cy: 'cy',
    Da: 'da',
    De: 'de',
    Dsb: 'dsb',
    El: 'el',
    En: 'en',
    EnAu: 'en-au',
    EnGb: 'en-gb',
    Eo: 'eo',
    Es: 'es',
    EsAr: 'es-ar',
    EsCo: 'es-co',
    EsMx: 'es-mx',
    EsNi: 'es-ni',
    EsVe: 'es-ve',
    Et: 'et',
    Eu: 'eu',
    Fa: 'fa',
    Fi: 'fi',
    Fr: 'fr',
    Fy: 'fy',
    Ga: 'ga',
    Gd: 'gd',
    Gl: 'gl',
    He: 'he',
    Hi: 'hi',
    Hr: 'hr',
    Hsb: 'hsb',
    Hu: 'hu',
    Hy: 'hy',
    Ia: 'ia',
    Id: 'id',
    Ig: 'ig',
    Io: 'io',
    Is: 'is',
    It: 'it',
    Ja: 'ja',
    Ka: 'ka',
    Kab: 'kab',
    Kk: 'kk',
    Km: 'km',
    Kn: 'kn',
    Ko: 'ko',
    Ky: 'ky',
    Lb: 'lb',
    Lt: 'lt',
    Lv: 'lv',
    Mk: 'mk',
    Ml: 'ml',
    Mn: 'mn',
    Mr: 'mr',
    Ms: 'ms',
    My: 'my',
    Nb: 'nb',
    Ne: 'ne',
    Nl: 'nl',
    Nn: 'nn',
    Os: 'os',
    Pa: 'pa',
    Pl: 'pl',
    Pt: 'pt',
    PtBr: 'pt-br',
    Ro: 'ro',
    Ru: 'ru',
    Sk: 'sk',
    Sl: 'sl',
    Sq: 'sq',
    Sr: 'sr',
    SrLatn: 'sr-latn',
    Sv: 'sv',
    Sw: 'sw',
    Ta: 'ta',
    Te: 'te',
    Tg: 'tg',
    Th: 'th',
    Tk: 'tk',
    Tr: 'tr',
    Tt: 'tt',
    Udm: 'udm',
    Ug: 'ug',
    Uk: 'uk',
    Ur: 'ur',
    Uz: 'uz',
    Vi: 'vi',
    ZhHans: 'zh-hans',
    ZhHant: 'zh-hant'
} as const;
export type ApiSchemaRetrieveLangEnum = typeof ApiSchemaRetrieveLangEnum[keyof typeof ApiSchemaRetrieveLangEnum];


